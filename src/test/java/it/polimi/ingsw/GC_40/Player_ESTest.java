/*
 * This file was automatically generated by EvoSuite
 * Tue May 30 10:30:56 CEST 2017
 */

package it.polimi.ingsw.GC_40;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.HashMap;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import it.polimi.ingsw.components.*;
import it.polimi.ingsw.cards.BuildingCard;
import it.polimi.ingsw.cards.Card;
import it.polimi.ingsw.cards.CharacterCard;
import it.polimi.ingsw.cards.TerritoryCard;
import it.polimi.ingsw.cards.VentureCard;
import it.polimi.ingsw.colors.ColorPlayer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      player0.decrementVictoryPoint((-1));
      assertEquals(1, player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      player0.incrementVictoryPoint((-1));
      assertEquals((-1), player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      player0.incrementFaithPoint(1);
      assertEquals(1, player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      player0.decrementMilitaryPoint((-1));
      assertEquals(1, player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      player0.incrementMilitaryPoint(1);
      assertEquals(1, player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      player0.decrementServant((-1));
      assertEquals(1, player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      player0.incrementServant(1);
      assertEquals(1, player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      player0.decrementStone((-1));
      assertEquals(1, player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      player0.incrementStone(1);
      assertEquals(1, player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      player0.decrementWood(1);
      assertEquals((-1), player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      player0.incrementWood(1);
      assertEquals(1, player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((ColorPlayer) null);
      player0.decrementCoin(1);
      assertEquals((-1), player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      player0.incrementCoin((-1));
      assertEquals((-1), player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.RED;
      Player player0 = new Player(colorPlayer0);
      player0.getColor();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      player0.decrementFaithPoint((-1));
      int int0 = player0.getCoin();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.RED;
      Player player0 = new Player(colorPlayer0);
      player0.decrementFaithPoint(1);
      int int0 = player0.getCoin();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      Card card0 = new Card();
      // Undeclared exception!
      try { 
        player0.addCard(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((ColorPlayer) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CharacterCard characterCard0 = new CharacterCard("territoryCard", "", 0, 0, "", 0, hashMap0, hashMap0);
      // Undeclared exception!
      try { 
        player0.addCard(characterCard0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Components.CharacterCard cannot be cast to Components.TerritoryCard
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.YELLOW;
      Player player0 = new Player(colorPlayer0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(0);
      VentureCard ventureCard0 = new VentureCard("buildingCard", "", 0, hashMap0, 0, 0, hashMap0);
      // Undeclared exception!
      try { 
        player0.addCard(ventureCard0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Components.VentureCard cannot be cast to Components.BuildingCard
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.RED;
      Player player0 = new Player(colorPlayer0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BuildingCard buildingCard0 = new BuildingCard("ventureCard", "", 0, hashMap0, hashMap0);
      // Undeclared exception!
      try { 
        player0.addCard(buildingCard0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Components.BuildingCard cannot be cast to Components.VentureCard
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      TerritoryCard territoryCard0 = new TerritoryCard("", (String) null, 0, hashMap0);
      player0.addCard(territoryCard0);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      VentureCard ventureCard0 = new VentureCard("characterCard", "", 0, hashMap0, hashMap0);
      // Undeclared exception!
      try { 
        player0.addCard(ventureCard0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Components.VentureCard cannot be cast to Components.CharacterCard
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.YELLOW;
      Player player0 = new Player(colorPlayer0);
      // Undeclared exception!
      try { 
        player0.counter("characterCard");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      // Undeclared exception!
      try { 
        player0.counter("ventureCard");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      // Undeclared exception!
      try { 
        player0.counter("territoryCard");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      // Undeclared exception!
      try { 
        player0.counter("buildingCard");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      int int0 = player0.counter("");
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasOrangeRelative);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.RED;
      Player player0 = new Player(colorPlayer0);
      int int0 = player0.getVictoryPoint();
      assertEquals(0, int0);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      player0.getVenture();
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      player0.getCharacter();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasNeutralRelative);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      int int0 = player0.getStone();
      assertTrue(player0.hasOrangeRelative);
      assertEquals(0, int0);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.RED;
      Player player0 = new Player(colorPlayer0);
      int int0 = player0.getCoin();
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasWhiteRelative);
      assertEquals(0, int0);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player((ColorPlayer) null);
      player0.getColor();
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.RED;
      Player player0 = new Player(colorPlayer0);
      int int0 = player0.getFaithPoint();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertEquals(0, int0);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player((ColorPlayer) null);
      int int0 = player0.getServant();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasOrangeRelative);
      assertEquals(0, int0);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      player0.getLeader();
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      player0.getBuilding();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      int int0 = player0.getWood();
      assertTrue(player0.hasWhiteRelative);
      assertEquals(0, int0);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.BLUE;
      Player player0 = new Player(colorPlayer0);
      int int0 = player0.getMilitaryPoint();
      assertTrue(player0.hasWhiteRelative);
      assertEquals(0, int0);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ColorPlayer colorPlayer0 = ColorPlayer.GREEN;
      Player player0 = new Player(colorPlayer0);
      player0.getTerritory();
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
  }
}
