/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 08 08:43:22 CEST 2017
 */

package it.polimi.ingsw.GC_40;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import it.polimi.ingsw.GC_40.Observer;
import it.polimi.ingsw.GC_40.Player;
import it.polimi.ingsw.cards.BuildingCard;
import it.polimi.ingsw.cards.Card;
import it.polimi.ingsw.cards.CharacterCard;
import it.polimi.ingsw.cards.TerritoryCard;
import it.polimi.ingsw.cards.VentureCard;
import it.polimi.ingsw.changes.Change;
import it.polimi.ingsw.colors.ColorPlayer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player();
      player0.decrementVictoryPoint((-1));
      assertEquals(1, player0.resourceCounter());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player();
      player0.decrementFaithPoint(1);
      assertEquals((-1), player0.resourceCounter());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player();
      player0.incrementFaithPoint((-1));
      assertEquals((-1), player0.resourceCounter());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.decrementServant(1);
      assertEquals((-1), player0.resourceCounter());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player();
      player0.incrementServant(1);
      assertEquals(1, player0.resourceCounter());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = UUID.randomUUID();
      Player player0 = new Player(uUID0);
      player0.decrementStone((-1));
      assertEquals(1, player0.resourceCounter());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      player0.incrementStone(1);
      assertEquals(1, player0.resourceCounter());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      player0.decrementWood(1);
      assertEquals((-1), player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player();
      player0.incrementWood((-1));
      assertEquals((-1), player0.getCoin());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player();
      player0.decrementCoin((-1));
      assertEquals(1, player0.resourceCounter());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((UUID) null);
      player0.incrementCoin(1);
      assertEquals(1, player0.resourceCounter());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      player0.setServant((-1));
      int int0 = player0.resourceCounter();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player();
      player0.setStone(1);
      int int0 = player0.resourceCounter();
      assertEquals(1, player0.getStone());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player();
      player0.setWood(1);
      int int0 = player0.resourceCounter();
      assertEquals(1, player0.getWood());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player();
      player0.decrementMilitaryPoint((-1));
      int int0 = player0.resourceCounter();
      assertEquals(1, player0.getCoin());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      player0.setWood(1);
      int int0 = player0.getWood();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((UUID) null);
      player0.setWood((-1));
      int int0 = player0.getWood();
      assertEquals((-1), player0.resourceCounter());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player();
      player0.setVictoryPoint((-1));
      int int0 = player0.getVictoryPoint();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UUID uUID0 = UUID.nameUUIDFromBytes(byteArray0);
      Player player0 = new Player(uUID0);
      player0.setStone(1);
      int int0 = player0.getStone();
      assertEquals(1, player0.resourceCounter());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player();
      player0.setStone((-1));
      int int0 = player0.getStone();
      assertEquals((-1), player0.resourceCounter());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((UUID) null);
      player0.setServant(1);
      int int0 = player0.getServant();
      assertEquals(1, player0.resourceCounter());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player();
      player0.setServant((-1));
      int int0 = player0.getServant();
      assertEquals((-1), player0.resourceCounter());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player();
      player0.setMilitaryPoint(1);
      int int0 = player0.getMilitaryPoint();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player();
      player0.setMilitaryPoint((-1));
      int int0 = player0.getMilitaryPoint();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UUID uUID0 = new UUID((-1L), 0L);
      Player player0 = new Player(uUID0);
      player0.getID();
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UUID uUID0 = new UUID(0L, 1L);
      Player player0 = new Player(uUID0);
      player0.getID();
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UUID uUID0 = UUID.nameUUIDFromBytes(byteArray0);
      Player player0 = new Player(uUID0);
      player0.getID();
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player();
      player0.setFaithPoint(1);
      int int0 = player0.getFaithPoint();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player();
      player0.setFaithPoint((-1));
      int int0 = player0.getFaithPoint();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player();
      ColorPlayer colorPlayer0 = ColorPlayer.RED;
      player0.setColor(colorPlayer0);
      player0.getColor();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasBlackRelative);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UUID uUID0 = UUID.nameUUIDFromBytes(byteArray0);
      Player player0 = new Player(uUID0);
      player0.incrementMilitaryPoint(1);
      int int0 = player0.getCoin();
      assertEquals(1, player0.resourceCounter());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player();
      player0.incrementVictoryPoint((-1));
      int int0 = player0.getCoin();
      assertEquals((-1), player0.resourceCounter());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player();
      ArrayList<CharacterCard> arrayList0 = new ArrayList<CharacterCard>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CharacterCard characterCard0 = new CharacterCard("", "", 0, 0, "", 0, hashMap0);
      arrayList0.add(characterCard0);
      player0.setCharacter(arrayList0);
      player0.getCharacter();
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player();
      ArrayList<BuildingCard> arrayList0 = new ArrayList<BuildingCard>();
      player0.setBuilding(arrayList0);
      player0.getBuilding();
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player();
      ArrayList<BuildingCard> arrayList0 = new ArrayList<BuildingCard>();
      player0.setBuilding(arrayList0);
      BuildingCard buildingCard0 = new BuildingCard((String) null, "", 0, (Map<String, Integer>) null);
      arrayList0.add(buildingCard0);
      player0.getBuilding();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player();
      player0.registerObserver((Observer<Change>) null);
      // Undeclared exception!
      try { 
        player0.incrementFaithPoint(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Observable", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player();
      player0.registerObserver((Observer<Change>) null);
      // Undeclared exception!
      try { 
        player0.decrementMilitaryPoint(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Observable", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((UUID) null);
      boolean boolean0 = player0.equals(player1);
      assertTrue(boolean0);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player1.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player1.hasBlackRelative);
      assertTrue(player1.hasWhiteRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player1.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player();
      boolean boolean0 = player0.equals((Object) null);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasBlackRelative);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player();
      boolean boolean0 = player0.equals(player0);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(boolean0);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player();
      ArrayList<TerritoryCard> arrayList0 = new ArrayList<TerritoryCard>(0);
      boolean boolean0 = player0.equals(arrayList0);
      assertTrue(player0.hasWhiteRelative);
      assertFalse(boolean0);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player();
      ColorPlayer colorPlayer0 = ColorPlayer.YELLOW;
      player0.setColor(colorPlayer0);
      player0.hashCode();
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player();
      player0.hashCode();
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UUID uUID0 = UUID.randomUUID();
      Player player0 = new Player(uUID0);
      player0.hashCode();
      //  // Unstable assertion: assertEquals(1585369171565299106L, uUID0.getMostSignificantBits());
      //  // Unstable assertion: assertEquals("16005cdc-a501-45a2-823d-9387bcdd28f3", uUID0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = new Card("territoryCard", "", 0);
      // Undeclared exception!
      try { 
        player0.addCard(card0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // it.polimi.ingsw.cards.Card cannot be cast to it.polimi.ingsw.cards.TerritoryCard
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BuildingCard buildingCard0 = new BuildingCard("buildingCard", "", 0, hashMap0);
      // Undeclared exception!
      try { 
        player0.addCard(buildingCard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BuildingCard buildingCard0 = new BuildingCard("ventureCard", "", 0, hashMap0);
      // Undeclared exception!
      try { 
        player0.addCard(buildingCard0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // it.polimi.ingsw.cards.BuildingCard cannot be cast to it.polimi.ingsw.cards.VentureCard
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BuildingCard buildingCard0 = new BuildingCard("", "", 0, hashMap0);
      player0.addCard(buildingCard0);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CharacterCard characterCard0 = new CharacterCard("characterCard", (String) null, 0, 0, (String) null, 0, hashMap0);
      // Undeclared exception!
      try { 
        player0.addCard(characterCard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.counter("characterCard");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.counter("territoryCard");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.counter("buildingCard");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.GC_40.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.counter("");
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasOrangeRelative);
      assertEquals(0, int0);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getVictoryPoint();
      assertEquals(0, int0);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.resourceCounter();
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasOrangeRelative);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Player player0 = new Player();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      player0.chooseCharacterCard(0, hashMap0);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Player player0 = new Player();
      player0.getVenture();
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Player player0 = new Player();
      player0.getCharacter();
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getStone();
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertEquals(0, int0);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Player player0 = new Player();
      ArrayList<VentureCard> arrayList0 = new ArrayList<VentureCard>();
      player0.setVentureCard(arrayList0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      VentureCard ventureCard0 = new VentureCard("", "", 0, 0, 0, hashMap0);
      arrayList0.add(ventureCard0);
      player0.getVenture();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UUID uUID0 = UUID.nameUUIDFromBytes(byteArray0);
      Player player0 = new Player(uUID0);
      int int0 = player0.getCoin();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasBlackRelative);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Player player0 = new Player();
      ArrayList<TerritoryCard> arrayList0 = new ArrayList<TerritoryCard>(0);
      player0.setTerritoryCard(arrayList0);
      TerritoryCard territoryCard0 = new TerritoryCard("", "", 0);
      arrayList0.add(territoryCard0);
      player0.getTerritory();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasNeutralRelative);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Player player0 = new Player();
      ArrayList<CharacterCard> arrayList0 = new ArrayList<CharacterCard>();
      player0.setCharacter(arrayList0);
      player0.getCharacter();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasNeutralRelative);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Player player0 = new Player((UUID) null);
      int int0 = player0.getServant();
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasOrangeRelative);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Player player0 = new Player();
      player0.getLeader();
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Player player0 = new Player();
      player0.setCoin(0);
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasWhiteRelative);
      assertEquals(0, player0.getCoin());
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Player player0 = new Player();
      player0.getColor();
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Player player0 = new Player();
      player0.getBuilding();
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasOrangeRelative);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getWood();
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasOrangeRelative);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getMilitaryPoint();
      assertTrue(player0.hasOrangeRelative);
      assertEquals(0, int0);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasBlackRelative);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Player player0 = new Player();
      player0.getID();
      assertTrue(player0.hasOrangeRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UUID uUID0 = new UUID(0L, 0L);
      Player player0 = new Player(uUID0);
      int int0 = player0.getFaithPoint();
      assertTrue(player0.hasOrangeRelative);
      assertEquals(0, int0);
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Player player0 = new Player();
      player0.getTerritory();
      assertTrue(player0.hasBlackRelative);
      assertTrue(player0.hasNeutralRelative);
      assertTrue(player0.hasWhiteRelative);
      assertTrue(player0.hasOrangeRelative);
  }
}
