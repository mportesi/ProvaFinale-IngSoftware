/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 18 21:58:44 CEST 2017
 */

package it.polimi.ingsw.areas;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import it.polimi.ingsw.GC_40.Play;
import it.polimi.ingsw.GC_40.Player;
import it.polimi.ingsw.cards.Card;
import it.polimi.ingsw.effects.GainHarvestValue;
import it.polimi.ingsw.effects.GetCard;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Tower_ESTest extends Tower_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower("M", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      tower0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower("M", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      String string0 = tower0.getType();
      assertEquals("M", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, (ArrayList<Floor>) null, play0);
      String string0 = tower0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, (ArrayList<Floor>) null, play0);
      ArrayList<Floor> arrayList1 = tower0.getFloors();
      assertNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      GetCard getCard0 = new GetCard("", 0, hashMap0);
      Floor floor0 = new Floor("", 0, getCard0);
      arrayList1.add(floor0);
      ArrayList<Floor> arrayList2 = tower0.getFloors();
      assertFalse(arrayList2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, (ArrayList<Floor>) null, play0);
      // Undeclared exception!
      try { 
        tower0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.areas.Tower", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, (ArrayList<Floor>) null, play0);
      // Undeclared exception!
      try { 
        tower0.isPresentAnyone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.areas.Tower", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, (ArrayList<Floor>) null, play0);
      // Undeclared exception!
      try { 
        tower0.isPresent((Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.areas.Tower", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, (ArrayList<Card>) null, (ArrayList<Floor>) null, play0);
      // Undeclared exception!
      try { 
        tower0.getFloor(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.areas.Tower", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      // Undeclared exception!
      try { 
        tower0.getFloor((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      boolean boolean0 = tower0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      boolean boolean0 = tower0.equals(arrayList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>();
      Play play0 = new Play();
      Tower tower0 = new Tower((String) null, arrayList0, arrayList0, arrayList0, arrayList1, play0);
      tower0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, (ArrayList<Floor>) null, play0);
      tower0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      // Undeclared exception!
      try { 
        tower0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      GetCard getCard0 = new GetCard("", 0, hashMap0);
      Floor floor0 = new Floor("", 0, getCard0);
      arrayList1.add(floor0);
      boolean boolean0 = tower0.isPresentAnyone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      boolean boolean0 = tower0.isPresent((Player) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      GainHarvestValue gainHarvestValue0 = new GainHarvestValue(0);
      Floor floor0 = new Floor("", 0, gainHarvestValue0);
      arrayList1.add(0, floor0);
      boolean boolean0 = tower0.isPresent((Player) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, (ArrayList<Floor>) null, play0);
      // Undeclared exception!
      try { 
        tower0.refreshTower(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.polimi.ingsw.areas.Tower", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      // Undeclared exception!
      try { 
        tower0.refreshTower(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>();
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      // Undeclared exception!
      try { 
        tower0.refreshTower(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower((String) null, arrayList0, arrayList0, arrayList0, arrayList1, play0);
      // Undeclared exception!
      try { 
        tower0.refreshTower(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      ArrayList<Floor> arrayList2 = tower0.getFloors();
      assertSame(arrayList2, arrayList1);
      assertNotNull(arrayList2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>();
      Play play0 = new Play();
      Tower tower0 = new Tower((String) null, arrayList0, arrayList0, arrayList0, arrayList1, play0);
      String string0 = tower0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      // Undeclared exception!
      try { 
        tower0.getFloor(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Floor> linkedList0 = new LinkedList<Floor>();
      ArrayList<Floor> arrayList1 = new ArrayList<Floor>(linkedList0);
      Play play0 = new Play();
      Tower tower0 = new Tower("", arrayList0, arrayList0, arrayList0, arrayList1, play0);
      int int0 = tower0.getCost();
      assertEquals(3, int0);
  }
}
